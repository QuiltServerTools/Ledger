{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Ledger is a server-side fabric logging mod for modern Minecraft 1.17+.  Ledger has been written from scratch in Kotlin to solve the main issues of previous logging mods have encountered.</p>"},{"location":"actions/","title":"Actions","text":"<p>These are the currently logged action types:</p> <ul> <li>block-break</li> <li>block-place</li> <li>block-change</li> <li>item-insert</li> <li>item-remove</li> <li>entity-killed</li> </ul>"},{"location":"config/","title":"Configuration","text":"<p>Ledger's configuration file is found in <code>config/ledger.toml</code>. It is written in TOML and can be edited in any text editor. Any changes you make to the config will be automatically updated without needing to reload or restart the server. When checking for the config for a value, it first checks the system properties, then the system environment, then the config file and finally it will use the default. For more info, read about Konf. To regenerate the config file, simply delete it.</p>"},{"location":"config/#database-settings","title":"Database settings","text":"<p>Found under <code>[database]</code></p> <p><code>queueTimeoutMin</code> [Default: 5] is the maximum amount of time to wait for the queue to drain when the server stops in minutes</p> <p><code>queueCheckDelaySec</code> [Default: 10] is the frequency in seconds to notify in console that the queue is not empty when the server stops</p> <p><code>autoPurgeDays</code> [Default: -1] is the number of days to keep actions in the database. If set to -1, actions will never be purged automatically</p> <p><code>batchSize</code> [Default: 1000] is the number of actions to insert into the database at once. This can be increased to improve performance, but may cause issues with slow databases</p> <p><code>batchDelay</code> [Default: 10] is the amount of time in ticks to wait between batches if the next batch isn't full. This can be increased to improve performance, but may cause issues with slow databases</p> <p><code>location</code> [Default: Nothing] is the location of the database file when using the default SQLite database or other file based databases like H2. The path is relative to the server's root directory. If the path is left out, the database will default to the server's world directory.</p> <p><code>logSQL</code> [Default: false] will log all SQL queries to the console. This is useful for debugging, but can be very spammy</p>"},{"location":"config/#search-settings","title":"Search settings","text":"<p>Found under <code>[search]</code></p> <p><code>pageSize</code> [Default: 8] controls the number of actions displayed per page</p> <p><code>purgePermissionLevel</code> [Default: 4] controls the permission level required to run the purge command</p> <p><code>timeZone</code> [Default: \"UTC\"] sets the timezone to display timestamps in when hovered.  This uses the Java TimeZone format. You can provide offsets (\"UTC\", \"UTC+3\"), but the \"continent/region\" format is preferred. A full list can be found here.</p> <p><code>maxRange</code> [Default: 100] controls the maximum range allowed in rollback / restore</p>"},{"location":"config/#message-theme","title":"Message theme","text":"<p>Found under <code>[color]</code></p> <p>Ledger allows for the customisation of the colors used in the messages sent in game.  By default, Ledger uses the blue theme. More themes can be found in the themes file</p>"},{"location":"config/#filters","title":"Filters","text":"<p>These allow you to control what is and is not logged</p> <p>Found under <code>[actions]</code></p> <p>All listed here are arrays and are formatted like so: <pre><code>array = []\nblocks = [\"minecraft:air\", \"minecraft:dirt\"]\n</code></pre></p> <p><code>typeBlacklist</code> [Default: empty] controls what action types are logged. Hover over the action in a chat message to see the type</p> <p><code>worldBlacklist</code> [Default: empty] controls in which dimensions events are logged.</p> <p><code>objectBlacklist</code> [Default: empty] controls which objects are logged. These can be item types, block types or entities</p> <p><code>sourceBlacklist</code> [Default: empty] controls which sources are logged. Examples are <code>\"lava\"</code>, <code>\"@playerName\"</code> and <code>\"gravity\"</code>. Player names can be specified by prefixing them with <code>\"@\"</code></p>"},{"location":"config/#default-config","title":"Default Config","text":"<pre><code>[database]\n# The maximum amount of time to wait for the queue to drain when the server stops\nqueueTimeoutMin = 5\n# The amount of time between checking if the queue is empty when the server stops\nqueueCheckDelaySec = 10\n\n[search]\n# Number of actions to show per page\npageSize = 8\n# Permission level for purge command\npurgePermissionLevel = 4\n# Time zone to display timestamps in. EX: \"UTC\", \"UTC+1\", \"America/Los_Angeles\"\ntimeZone = \"UTC\"\n\n[color]\n# Colors in hex format\nprimary = \"#009688\"\nprimaryVariant = \"#52c7b8\"\nsecondary = \"#1e88e5\"\nsecondaryVariant = \"#6ab7ff\"\nlight = \"#c5d6f0\"\n\n[actions]\n# Blacklists - blacklisted things will not be logged in the database\n# Example - Prevent all actions with stone or bat as the object from being logged\n# objectBlacklist = [\n#   \"minecraft:stone\",\n#   \"minecraft:bat\"\n# ]\n\n# Blacklists action types. Ex: \"block-break\", \"entity-kill\"\ntypeBlacklist = []\n# Blacklists worlds/dimensions. Ex: \"mincraft:the_end\", \"minecraft:overworld\"\nworldBlacklist = []\n# Blacklists objects (Items, Mobs, Blocks). Ex: \"minecraft:cobblestone\", \"minecraft:blaze\"\nobjectBlacklist = []\n# Blacklists sources. Ex: \"lava\", \"gravity\", \"fire\", \"fall\", \"@playerName\"\nsourceBlacklist = []\n\n[networking]\n# This section relates to Ledger's ability to interact with client mods for ease of use\n# Networking is enabled by default but you can disable it here\n\n# Change to true to allow Ledger client mod packets\nnetworking = true\n</code></pre>"},{"location":"install/","title":"Installation","text":"<ol> <li>Set up a Fabric Server for 1.17</li> <li>Install Fabric API</li> <li>Install Fabric Language Kotlin</li> <li>Install Ledger</li> <li>Run the server</li> <li>Adjust config as needed</li> </ol> <p>Run into any issues? Join our Discord for support!</p>"},{"location":"install/#other-databases","title":"Other Databases","text":"<p>Ledger supports other databases like MySQL, PostgreSQL and H2 with the help of the Ledger Databases extension.</p>"},{"location":"install/#h2","title":"H2","text":"<p>H2 is another flat-file database like the default sqlite that may yield faster results but is more experimental.</p> <p>Add the following to the bottom of your Ledger config file:</p> <pre><code>[database_extensions]\ndatabase = \"H2\"\n</code></pre>"},{"location":"install/#mysql","title":"MySQL","text":"<p>MySQL requires running a separate MySQL database and more setup than just plug and play SQLite, but can support much larger databases at faster speeds. It also supports MySQL based databases like MariaDB.</p> <p>Add the following to the bottom of your Ledger config file:</p> <pre><code>[database_extensions]\ndatabase = \"MYSQL\"\nurl = \"\"\nusername = \"\"\npassword = \"\"\nproperties = []\n</code></pre> <p><code>url</code>: Must be URL of database with <code>/&lt;database_name&gt;</code> appended. An example URL would be <code>localhost/ledger</code>. You can optionally add port information such as <code>localhost:3000/ledger</code></p>"},{"location":"install/#postgresql","title":"PostgreSQL","text":"<p>PostgreSQL requires running a separate PostgreSQL database and more setup than just plug and play SQLite, but can support much larger databases at faster speeds. It is more experimental the MySQL but may yield faster performance.</p> <p>Add the following to the bottom of your Ledger config file:</p> <pre><code>[database_extensions]\ndatabase = \"POSTGRESQL\"\nurl = \"\"\nusername = \"\"\npassword = \"\"\nproperties = []\n</code></pre> <p><code>url</code>: Must be URL of database with <code>/&lt;database_name&gt;</code> appended. An example URL would be <code>localhost/ledger</code>. You can optionally add port information such as <code>localhost:3000/ledger</code></p>"},{"location":"install/#connector-properties","title":"Connector properties","text":"<p>For some databases, such as MySQL, you can provide properties to the database connector. For each property, add a string entry to the <code>properties</code> array.</p> <pre><code>properties = [\"useJDBCCompliantTimezoneShift=true\", \"useLegacyDatetimeCode=false\", \"serverTimezone=UTC\"]\n</code></pre>"},{"location":"networking/","title":"Networking","text":"<p>Ledger supports numerous custom packets for interacting with supported client mods</p>"},{"location":"networking/#versions","title":"Versions","text":"<p>The information on this page is applicable for Ledger Networking version 3, which is the version in Ledger versions <code>1.3.0</code> and later</p>"},{"location":"networking/#packet-types","title":"Packet Types","text":"<p>The server will not respond to packets unless the player has the correct permissions, which is <code>ledger.networking</code> and the relevant command permission</p>"},{"location":"networking/#notation","title":"Notation","text":"<p>Types shown here are the Java variable types. They have the equivalent value (if applicable) in Kotlin when used in Ledger's internal code</p>"},{"location":"networking/#client-to-server","title":"Client to Server","text":""},{"location":"networking/#response","title":"Response","text":"<p>Once one of the c2s packets have been received, the server will send a response packet with the packet type it was responding to and the response code. See below for more information</p>"},{"location":"networking/#inspect-packet","title":"Inspect Packet","text":"<p>Inspects a block at a given position, using the player's current dimension. This may be changed in the future</p> <p>Channel: <code>ledger:inspect</code></p> <p>Buf content:</p> <p>Position: <code>BlockPos</code></p> <p>Number of pages: <code>int</code></p> <p>Return packet type: <code>ledger.action</code></p>"},{"location":"networking/#search-packet","title":"Search Packet","text":"<p>Channel: <code>ledger:search</code></p> <p>Buf content:</p> <p>Input: <code>String</code></p> <p>Pages: <code>int</code></p> <p>String formatted in the same way as a <code>/lg search</code> command would be formatted</p> <p>Return packet type: <code>ledger.action</code></p>"},{"location":"networking/#handshake-packet","title":"Handshake Packet","text":"<p>Channel: <code>ledger:handshake</code></p> <p>Buf content:</p> <p>Mod NBT: <code>NbtCompound</code></p> <p>Mod NBT should contain the following:</p> <ul> <li> <p>Mod Version (<code>version</code>) [<code>String</code>] : Fabric Loader user friendly string</p> </li> <li> <p>Mod ID (<code>modid</code>) [<code>String</code>] : Mod identifier of the mod</p> </li> <li> <p>Protocol version (<code>protocol_version</code>) [<code>int</code>] : Ledger protocol version</p> </li> </ul>"},{"location":"networking/#purge-packet","title":"Purge Packet","text":"<p>Channel: <code>ledger.purge</code></p> <p>Buf content:</p> <p>Params: <code>String</code> - same string as used in the search command</p>"},{"location":"networking/#rollback-packet","title":"Rollback Packet","text":"<p>Channel: <code>ledger.rollback</code></p> <p>Buf content:</p> <p>Restore: <code>Boolean</code> - To restore must be true, for to rollback must be false</p> <p>Params: <code>String</code> - same string as used in the search command</p>"},{"location":"networking/#server-to-client","title":"Server to client","text":""},{"location":"networking/#action-packet","title":"Action Packet","text":"<p>Represents a logged action from the database</p> <p>Channel: <code>ledger:action</code></p> <p>Buf content:</p> <p>Position: <code>BlockPos</code></p> <p>Type: <code>String</code></p> <p>Dimension: <code>Identifier</code></p> <p>Old Object: <code>Identifier</code></p> <p>New Object: <code>Identifier</code></p> <p>Source: <code>String</code></p> <p>Epoch second: <code>long</code></p> <p>Rolled back: <code>boolean</code></p> <p>Additional NBT: <code>String</code></p>"},{"location":"networking/#handshake-packet_1","title":"Handshake Packet","text":"<p>Sends information about Ledger to compatible clients</p> <p>Channel: <code>ledger:handshake</code></p> <p>Buf content:</p> <p>Protocol Version: <code>int</code> - Version of Ledger networking protocol. Ledger <code>1.1.0</code> and later uses version <code>1</code></p> <p>Mod allowed: <code>boolean</code></p>"},{"location":"networking/#response_1","title":"Response","text":"<p>Registers the server receiving a Ledger packet and contains information about what the server is doing</p> <p>Channel: <code>ledger.response</code></p>"},{"location":"networking/#packet-structure","title":"Packet structure","text":"<p>Type: <code>Identifier</code> - Packet type being responded to</p> <p>Response code: <code>int</code></p>"},{"location":"networking/#response-codes","title":"Response Codes","text":"<p><code>0</code>: No permission</p> <p><code>1</code>: Executing command</p> <p><code>2</code>: Completed command</p> <p><code>3</code>: Error while executing command</p> <p><code>4</code>: Cannot execute command at this time</p>"},{"location":"parameters/","title":"Parameters","text":"<p>Parameters are used in many commands such as search and preview. They allow you to refine your selection, so you only get the actions you want. Currently, there are 7 different parameters which can be found below. Negative Parameters Example - <code>action:!entity-kill</code></p>"},{"location":"parameters/#action","title":"Action","text":"<p>Key - <code>action:</code> Value - <code>Action Identifier</code> Multiple Allowed - <code>Yes</code> Negative Allowed - <code>Yes</code>  Example - <code>action:block-break</code></p> <p>This parameter allows you to filter your selection based on the action type. An Action Identifier is a string with the group and type divided by a <code>-</code>.</p>"},{"location":"parameters/#dimension","title":"Dimension","text":"<p>Key - <code>world:</code> Value - <code>World Identifier</code> Negative Allowed - <code>Yes</code> Multiple Allowed - <code>Yes</code> Example - <code>world:minecraft:the_end</code></p> <p>This parameter allows you to filter your selection based on the dimension. An identifier is Minecraft's ID system of a namespace and a path divided by <code>:</code>.</p>"},{"location":"parameters/#object","title":"Object","text":"<p>Key - <code>object:</code> Value - <code>Object Identifier</code> Negative Allowed - <code>Yes</code> Multiple Allowed - <code>Yes</code> Example - <code>object:minecraft:stone</code></p> <p>This parameter allows you to filter your selection based on the object. An object is ledger's name for an identifier that could be a block, item or entity. An identifier is Minecraft's ID system of a namespace and a path divided by <code>:</code>.</p>"},{"location":"parameters/#range","title":"Range","text":"<p>Key - <code>range:</code> Value - <code>Integer &gt; 1</code> Negative Allowed - <code>No</code> Multiple Allowed - <code>No</code> Example - <code>range:5</code></p> <p>This parameter allows you to filter your selection based on your location.</p>"},{"location":"parameters/#source","title":"Source","text":"<p>Key - <code>source:</code> Value - <code>Source Name</code> Negative Allowed - <code>Yes</code> Multiple Allowed - <code>Yes</code> Example - <code>source:Potatoboy9999</code> <code>source:@tnt</code></p> <p>This parameter allows you to filter your selection based on the source of the action. To filter based on a specific player, simply use that players name. To filter based on any other source, you must use an <code>@</code> symbol.</p>"},{"location":"parameters/#time","title":"Time","text":""},{"location":"parameters/#before","title":"Before","text":"<p>Key - <code>before:</code> Value - <code>Time Duration</code> Negative Allowed - <code>No</code> Multiple Allowed - <code>No</code> Example - <code>before:3h</code></p>"},{"location":"parameters/#after","title":"After","text":"<p>Key - <code>after:</code> Value - <code>Time Duration</code> Negative Allowed - <code>No</code> Multiple Allowed - <code>No</code> Example - <code>after:3h</code></p> <p>These parameters allow you to filter your selection based on time. It will select actions within the duration specified. You can specify durations with <code>s</code>econd, <code>m</code>inute, <code>h</code>our, <code>d</code>ay and <code>w</code>eek. You can also combine multiple durations for example <code>7w4d31m42s</code>. The <code>after</code> parameter is the same as the <code>time</code> parameter in older versions. The <code>before</code> parameter selects all results before the point in time that was the provided, and after that point for <code>after</code>. An easy way to remember the difference between <code>before:1d</code> and <code>after:1d</code> is to think about it like this. If you go back in time 1 day, do you want everything that happened <code>before</code> then or <code>after</code> then. Usually you want <code>after</code>.</p>"},{"location":"parameters/#rollback-status","title":"Rollback Status","text":"<p>Key - <code>rolledback:</code> Value - <code>true</code> or <code>false</code> Negative Allowed - <code>No</code> Multiple Allowed - <code>No</code> Example - <code>rolledback:true</code> </p> <p>This parameter allows you to filter by rollback state. If true, then it will only show results that have already been rolled back. If false, then it will only show results that have not been rolled back.</p>"},{"location":"queue/","title":"Queue","text":"<p>Whenever an action happens, it is added to the database queue. Often, the queue will be empty, and it will be instantly inserted into the database. If there is lots of players or something like an explosion creating lots of actions, the queue may fill up and it could take a while for actions to be logged. You can see the status of your database queue by using the status command. If the server stops while there is still actions  in the queue that need to be logged, it will force the server to wait until it is finished logging the actions or until it times out. You can adjust the timeout in the config</p>"},{"location":"themes/","title":"Themes","text":""},{"location":"themes/#ledger-chat-themes","title":"Ledger Chat Themes","text":"<p>This is a list of preset themes for your Ledger messages. Copy/paste the block into your <code>color</code> section to use</p>"},{"location":"themes/#default-blue","title":"Default blue","text":"<pre><code>[color]\n# Colors in hex format\nprimary = \"#009688\"\nprimaryVariant = \"#52c7b8\"\nsecondary = \"#1e88e5\"\nsecondaryVariant = \"#6ab7ff\"\nlight = \"#c5d6f0\"\n</code></pre>"},{"location":"themes/#red","title":"Red","text":"<pre><code>[color]\n# Colors in hex format\nprimary = \"#A4243B\"\nprimaryVariant = \"#C8973C\"\nsecondary = \"#BD632F\"\nsecondaryVariant = \"#D8C99B\"\nlight = \"#ccc8c8\"\n</code></pre>"},{"location":"themes/#green","title":"Green","text":"<pre><code>[color]\n# Colors in hex format\nprimary = \"#2A993F\"\nprimaryVariant = \"#b0c196\"\nsecondary = \"#20D44D\"\nsecondaryVariant = \"#279639\"\nlight = \"#c9c9c9\"\n</code></pre>"},{"location":"translations/","title":"Translations","text":"<p>Ledger currently supports many languages. The language used is based on the clients selected language and defaults to <code>en_us</code> if it doesn't support the clients language.</p>"},{"location":"translations/#supported-languages","title":"Supported Languages","text":"<ul> <li><code>en_us</code></li> <li><code>nl_nl</code></li> <li><code>ru_ru</code></li> <li><code>zh_cn</code></li> <li><code>de_de</code></li> </ul>"},{"location":"translations/#contributing","title":"Contributing","text":"<p>You can contribute support for a new language or improve an old one by submitting a pull request to the data/ledger/lang folder.</p>"},{"location":"api/extension_development/","title":"Developing Extensions","text":"<p>Extensions provide an easy way to add your own functionality to Ledger</p>"},{"location":"api/extension_development/#note","title":"Note","text":"<p>The docs shown here have Kotlin code, but you can write your extension in Java should you wish</p>"},{"location":"api/extension_development/#set-up-project","title":"Set up project","text":"<ol> <li>Set up your mod environment as usual</li> <li>Publish Ledger to <code>mavenLocal</code></li> <li>Add the following to your <code>build.gradle</code>:</li> </ol> <pre><code>modImplementation(include(\"com.github.quiltservertools:ledger:LATEST_LEDGER_VERSION\"))\n</code></pre>"},{"location":"api/extension_development/#creating-your-extension","title":"Creating your extension","text":"<pre><code>object Extension : DatabaseExtension {\n    override fun getDatabase(server: MinecraftServer): Database {\n        TODO(\"Tutorial\")\n    }\n\n    override fun getIdentifier(): Identifier {\n        TODO(\"Tutorial\")\n    }\n    override fun getConfigSpecs(): List&lt;ConfigSpec&gt; {\n        return ArrayList()\n    }\n}\n</code></pre> <p>We now need to fill out the methods.</p> <p><code>getDatabase</code>: Returns an Exposed <code>Database</code> object. This is how you add new database types to Ledger</p> <p><code>getIdentifier</code>: Should return a new <code>Identifier(YOUR_MODID, DATABASE_TYPE)</code> object.</p>"},{"location":"api/extension_development/#register-extension","title":"Register extension","text":"<p>In the entrypoint of your mod, add the relevant call to <code>ExtensionManager#registerExtension</code></p> <pre><code>object MyMod : ModInitializer {\n    override fun onInitialize() {\n        ExtensionManager.registerExtension(Extension)\n    }\n}\n</code></pre> <p>It's as simple as that</p>"},{"location":"api/extension_development/#command-extension","title":"Command extension","text":"<p>Create a command class:</p> <pre><code>object MyLedgerSubCommand : BuildableCommand {\n    override fun build(): LiteralCommandNode&lt;ServerCommandSource&gt; {\n        return CommandManager.literal(\"subcommand\")\n            .executes { ctx.source.sendFeedback(LiteralText(\"Subcommand run\"), false) }\n    }\n}\n</code></pre> <p>Now you create your extension class and register it like shown above</p> <pre><code>object Extension : CommandExtension {\n    fun registerSubcommands(): List&lt;BuildableCommand&gt; {\n        val list = mutableListOf&lt;BuildableCommand&gt;()\n        list.add(MyLedgerSubCommand)\n        return list\n    }\n    override fun getConfigSpecs(): List&lt;ConfigSpec&gt; {\n        return ArrayList()\n    }\n}\n</code></pre>"},{"location":"api/extension_development/#config-specs","title":"Config specs","text":"<p>Ledger uses the Konf library for configuration. You can add your own config specs to Ledger's file if your extension needs it</p> <p>Create a config spec:</p> <pre><code>object ExtensionSpec : ConfigSpec() {\n    val myProperty by optional(true)\n    val myRequiredProperty by required&lt;Boolean&gt;()\n}\n</code></pre> <p>Add the relevant line to your config file:</p> <pre><code># Config file above\n\n[extension]\nmyProperty = false\nmyRequiredProperty = true\n</code></pre> <p>You should make all properties optional unless your extension cannot function without a value. This is because existing config files will not have these values automatically added.</p> <p>Register your spec:</p> <pre><code>override fun getConfigSpecs(): List&lt;ConfigSpec&gt; {\n        return listOf(ExtensionSpec)\n    }\n</code></pre>"},{"location":"api/using_the_database/","title":"Accessing the Ledger Database","text":"<p>Ledger has a database with access to potentially hundreds of thousands or even millions of data points. This page describes how you can make use of our database in your own mods</p>"},{"location":"api/using_the_database/#what-about-extensions","title":"What about extensions?","text":"<p>The database extension API is extremely simple - it is designed to allow other database types, not actually accessing the databse</p>"},{"location":"api/using_the_database/#what-language","title":"What language?","text":"<p>While we would strongly recommend Kotlin, which grants  you access to all of our database methods, removing the need for an API, it is possible to write using Java with our LedgerApi. Please see the Java section.</p>"},{"location":"api/using_the_database/#negatable-parameters","title":"Negatable parameters","text":"<p>When searching the database, some parameters can be negative. Making the world parameter negative, for example, would show all results where the world is not the one specified.</p>"},{"location":"api/using_the_database/#kotlin","title":"Kotlin","text":"<p>With Kotlin, you can access our database from within the <code>Ledger</code> coroutine.</p> <pre><code>object LedgerExamples {\n    fun search(targetWorld: ServerWorld) {\n        // We make a search parameters object showing results only in the world\n        val params = ActionSearchParams.build {\n            this.worlds = mutableSetOf(Negatable.allow(targetWorld.getRegistryKey().getValue()))\n        }\n        Ledger.launch {\n            // Run the query and select actions on page 1\n            val results: SearchResults = DataaseManager.searchActions(targetWorld)\n            // Store the actions of the current page in a variable\n            val actions: List&lt;ActionType&gt; = results.actions\n        }\n    }\n    fun insert(world: World,\n        player: PlayerEntity,\n        pos: BlockPos,\n        state: BlockState,\n        context: ItemPlacementContext,\n        entity: BlockEntity?) {\n        // Create action object\n        val action = ActionFactory.blockPlaceAction(world, pos, state, player, entity)\n        // Insert action into the database\n        ActionQueueService.addToQueue(action)\n    }\n}\n</code></pre>"},{"location":"api/using_the_database/#java","title":"Java","text":"<p>With Java, you can access our database with the API which can be obtained with <code>Ledger.getApi()</code>. You can see the API here.</p> <pre><code>public class LedgerExamples {\n    public SearchResults getSearchResults(ServerWorld world) {\n        // Create parameters\n        ActionSearchParams.Builder params = new ActionSearchParams.Builder();\n        Set&lt;Negatable&lt;Identifier&gt;&gt; worlds = new HashSet&lt;&gt;();\n        worlds.add(Negatable.allow(world.getRegistryKey().getValue()));\n        params.setWorlds(worlds);\n        // Run search\n        CompletableFuture&lt;SearchResults&gt; future = Ledger.getApi().searchActions(params.build(), 0);\n        // Blocks thread for result\n        SearchResults results = future.get();\n    }\n\n    public void insert(World world,\n                       PlayerEntity player,\n                       BlockPos pos,\n                       BlockState state,\n                       ItemPlacementContext context,\n                       BlockEntity entity) {\n        // Create action\n        ActionType action = ActionFactory.INSTANCE.blockPlaceAction(world, pos, state, player, entity);\n        // Log the action\n        Ledger.getApi().logAction(action);\n    }\n}\n</code></pre>"},{"location":"api/using_the_database/#negatable","title":"Negatable","text":"<p>Normal behaviour: <code>Negatable.allow(object)</code></p> <p>Negative behaviour: <code>Negatable.deny(object)</code></p>"},{"location":"api/using_the_database/#actionsearchparams","title":"ActionSearchParams","text":"<p>This class is used for filtering searches.</p>"},{"location":"api/using_the_database/#kotlin_1","title":"Kotlin","text":"<p>Set the parameters when creating the <code>ActionSearchParams.Builder</code> object</p>"},{"location":"api/using_the_database/#java_1","title":"Java","text":"<p>Use the <code>setPropertyName</code> method on the <code>ActionSearchParams.Builder</code> object</p> <p>Current params:</p> <p><code>min</code>: <code>BlockPos</code></p> <p>Forms one corner of the cubic block selection</p> <p><code>max</code>: <code>BlockPos</code></p> <p>Forms the other corner of the cubic block selection</p> <p><code>before</code>: <code>Instant</code></p> <p>Selects all actions which occurred before the specified point in time</p> <p><code>after</code>: <code>Instant</code></p> <p>Selects all actions which occurred after the specified point in time</p> <p><code>actions</code>: <code>MutableSet&lt;Negatable&lt;String&gt;&gt;</code></p> <p>A list of action types with OR filtering if not negative and AND filtering if negative</p> <p><code>objects</code>: <code>MutableSet&lt;Negatable&lt;Identifier&gt;&gt;</code></p> <p>A list of identifiers containing object names, such as <code>minecraft:diamond_ore</code>. Uses OR filtering if not negative and AND filtering if negative</p> <p><code>sourceNames</code>: <code>MutableSet&lt;Negatable&lt;String&gt;&gt;</code></p> <p>A list of non-player source names, such as <code>tnt</code>, with OR filtering if not negative and AND filtering if negative</p> <p><code>sourcePlayerNames</code>: <code>MutableSet&lt;Negatable&lt;String&gt;&gt;</code></p> <p>A list of player names to filter by. Uses OR filtering if not negative and AND filtering if negative</p> <p><code>worlds</code> : <code>MutableSet&lt;Negatable&lt;Identifier&gt;&gt;</code></p> <p>A list of world identifiers to filter by. Uses OR filtering if not negative and AND filtering if negative</p>"},{"location":"commands/inspect/","title":"Inspect","text":"<p><code>/ledger inspect</code> Alias: <code>i</code> Permission: <code>ledger.commands.inspect</code></p>"},{"location":"commands/inspect/#ledger-inspect-x-y-z","title":"<code>/ledger inspect &lt;x&gt; &lt;y&gt; &lt;z&gt;</code>","text":"<p>This command will inspect the logs at a specific location</p>"},{"location":"commands/inspect/#ledger-inspect","title":"<code>/ledger inspect</code>","text":"<p>This command toggles Inspect Mode for the player than ran it</p> <p>Inspect Mode <pre><code>Left click a block - Inspect the block clicked\nRight click a block - Inspect the block on the side clicked \n</code></pre></p>"},{"location":"commands/inspect/#ledger-inspect-on","title":"<code>/ledger inspect on</code>","text":"<p>This command will toggle inspect mode on</p>"},{"location":"commands/inspect/#ledger-inspect-off","title":"<code>/ledger inspect off</code>","text":"<p>This command will toggle inspect mode off</p>"},{"location":"commands/page/","title":"Page","text":"<p><code>/ledger page</code> Alias: <code>pg</code> Permission: None</p>"},{"location":"commands/page/#ledger-page-page","title":"<code>/ledger page &lt;page&gt;</code>","text":"<p>This command allows you to manually jump to a specific page instead of using the page buttons. This can allow you to quickly go to where you want.</p>"},{"location":"commands/player/","title":"Player","text":"<p><code>/ledger player</code> Permission: <code>ledger.commands.player</code> Alias: <code>pl</code></p>"},{"location":"commands/player/#ledger-player-profiles","title":"<code>/ledger player &lt;profiles&gt;</code>","text":"<p>This command searches for the name, first and last join of a player</p>"},{"location":"commands/player/#example-syntax-for-players","title":"Example syntax for players","text":"<p><code>/ledger player Potatoboy9999</code></p>"},{"location":"commands/player/#results","title":"Results","text":"<p><code>&lt;username&gt;: First joined &lt;first_join_time&gt;. Last joined &lt;last_join_time&gt;</code></p>"},{"location":"commands/preview/","title":"Preview","text":"<p><code>/ledger preview</code> Alias: <code>pv</code> Permission: <code>ledger.commands.preview</code></p>"},{"location":"commands/preview/#ledger-preview-rollback-params","title":"<code>/ledger preview rollback &lt;params&gt;</code>","text":"<p>This command will find all actions that match the parameters that haven't already been rolled back. It will then send a preview of what the world would look like with all the selected actions undone. This is much safer than using the raw rollback command and is highly recommended over it.</p> <p>Supported Previews</p> <ul> <li>Block</li> </ul>"},{"location":"commands/preview/#ledger-preview-restore-params","title":"<code>/ledger preview restore &lt;params&gt;</code>","text":"<p>Similar to <code>/ledger preview rollback</code>, this command will find all actions that match the parameters that have already been rolled back. It will then send a preview of what the world would look like with all the selected actions re-applied. This is much safer than using the raw preview command and is highly recommended over it.</p> <p>Supported Previews</p> <ul> <li>Block</li> </ul>"},{"location":"commands/preview/#ledger-preview-apply","title":"<code>/ledger preview apply</code>","text":"<p>This will apply your current preview to the world if you have one.</p>"},{"location":"commands/preview/#ledger-preview-cancel","title":"<code>/ledger preview cancel</code>","text":"<p>This will cancel your current preview if you have one.</p>"},{"location":"commands/purge/","title":"Purge","text":"<p><code>/ledger purge</code> Permission: <code>ledger.commands.purge</code></p>"},{"location":"commands/purge/#ledger-purge-params","title":"<code>/ledger purge &lt;params&gt;</code>","text":"<p>This command will remove all entries from the database which fit the parameters specified. See parameters</p>"},{"location":"commands/restore/","title":"Restore","text":"<p><code>/ledger restore</code> Alias: None Permission: <code>ledger.commands.rollback</code></p>"},{"location":"commands/restore/#ledger-restore-params","title":"<code>/ledger restore &lt;params&gt;</code>","text":"<p>This command will find all actions that match the parameters that have already been rolled back. It will then undo all possible selected actions.  Basically, it undoes rollbacks. It is highly recommended to use the preview command instead to make sure you are doing what you want.</p> <p>Supported Restores</p> <ul> <li>Block</li> <li>Item</li> <li>Entity</li> </ul>"},{"location":"commands/rollback/","title":"Rollback","text":"<p><code>/ledger rollback</code> Alias: <code>rb</code> Permission: <code>ledger.commands.rollback</code></p>"},{"location":"commands/rollback/#ledger-rollback-params","title":"<code>/ledger rollback &lt;params&gt;</code>","text":"<p>This command will find all actions that match the parameters that haven't already been rolled back. It will then undo all possible selected actions.  To reverse a rollback, use the restore command. It is highly recommended to use the preview command instead to make sure you are doing what you want.</p> <p>Supported Rollbacks</p> <ul> <li>Block</li> <li>Item</li> <li>Entity</li> </ul>"},{"location":"commands/root/","title":"Root","text":"<p><code>/ledger</code> Alias: <code>lg</code> Permission: <code>ledger.commands.root</code></p> <p>This is the central command to ledger that grants access to all other commands.</p>"},{"location":"commands/search/","title":"Search","text":"<p><code>/ledger search</code> Alias: <code>s</code> Permission: <code>ledger.commands.search</code></p>"},{"location":"commands/search/#ledger-search-params","title":"<code>/ledger search &lt;params&gt;</code>","text":"<p>Often, inspecting just one position is not what you want. The search command allows you to preform advanced queries on the database. To refine your search, use search parameters. After executing your search, you will see all the results and can paginate between them if needed. </p> <code>Display:</code> Time ago Source of the action Action that occurred Object that was changed Location <code>Hover:</code> Exact time Action identifier Object identifier Teleport on click <p>Order can be customized, see configuration</p>"},{"location":"commands/status/","title":"Status","text":"<p><code>/ledger status</code> Alias: None Permission: <code>ledger.commands.status</code></p>"},{"location":"commands/status/#ledger-status","title":"<code>/ledger status</code>","text":"<p>This command will give you the following information.</p> Info Explanation Version The current version of Ledger on your server Queue Status Whether or not the queue is free or busy. Discord A link to the Fabric Server Tools discord for support Wiki A link to the wiki <p></p>"},{"location":"commands/teleport/","title":"Teleport","text":"<p><code>/ledger tp</code> Alias: None Permission: <code>ledger.commands.tp</code></p>"},{"location":"commands/teleport/#ledger-tp-world-x-y-z","title":"<code>/ledger tp &lt;world&gt; &lt;x&gt; &lt;y&gt; &lt;z&gt;</code>","text":"<p>This command allows players to teleport to a specific location in a world. This is mainly used internally for teleporting to locations in search results.</p>"},{"location":"extensions/extensions/","title":"Extensions","text":"<p>Ledger extensions allow for additional functionality to be added to Ledger via another mod</p>"},{"location":"extensions/extensions/#install","title":"Install","text":"<ol> <li>Install Ledger</li> <li>Install the extension of your choice in your mods folder</li> <li>Run your server and adjust the config as needed. The extension should provide information on how to configure it</li> </ol>"},{"location":"extensions/extensions/#available-extensions","title":"Available extensions","text":"<ul> <li>Ledger Databases - Adds support for MySQL and H2</li> </ul>"},{"location":"extensions/extensions/#features-possible-via-extensions","title":"Features possible via extensions","text":"<ul> <li>Changing the type of database used by Ledger</li> <li>Adding custom commands</li> <li>Adding configuration options to the existing config file</li> </ul>"}]}