plugins {
    id "fabric-loom" version "$loom_version"
    id "maven-publish"
    id "org.jetbrains.kotlin.jvm" version "$kotlin_version"
    id "org.jetbrains.kotlin.plugin.serialization" version "$kotlin_version"
    id "io.gitlab.arturbosch.detekt" version "1.15.0"
    id "com.github.jakemarsden.git-hooks" version "0.0.2"
    id "com.github.johnrengelman.shadow" version "7.0.0"
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

sourceSets {
    testmod {
        runtimeClasspath += main.runtimeClasspath
        compileClasspath += main.compileClasspath
    }
}

minecraft {
    runs {
        testmodClient {
            client()
            ideConfigGenerated project.rootProject == project
            name = "Networking Testmod (Client)"
            source sourceSets.testmod
        }
    }
}

configurations {
    shadow
    implementation.extendsFrom shadow

    // in case it is needed later
    modshadow
    modImplementation.extendsFrom modshadow
}

repositories {
    maven { url "https://maven.fabricmc.net/" }
    maven { url "https://maven.nucleoid.xyz/" }
    maven { url 'https://maven.bymartrixx.me' }
    maven { url "https://jitpack.io" }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    mavenCentral()
    jcenter()
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // Permissions
    modImplementation include('me.lucko:fabric-permissions-api:0.1-SNAPSHOT')

    // Translations
    modImplementation include("fr.catcore:server-translations-api:${project.server_translations_version}")

    // Kotlin
    modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"

    // Database
    implementation shadow("org.jetbrains.exposed:exposed-core:${project.exposedVersion}")
    implementation shadow("org.jetbrains.exposed:exposed-dao:${project.exposedVersion}")
    implementation shadow("org.jetbrains.exposed:exposed-jdbc:${project.exposedVersion}")
    implementation shadow("org.jetbrains.exposed:exposed-java-time:${project.exposedVersion}")

    implementation shadow("org.xerial:sqlite-jdbc:${project.jdbc_version}")

    // Config
    shadow "com.uchuhimo:konf-core:1.1.2"
    shadow "com.uchuhimo:konf-toml:1.1.2"

    // Debug
    modRuntime "me.bymartrixx:wdmcf:1.0.2"

    // PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
    // You may need to force-disable transitiveness on them.
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

processTestmodResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

jar {
    from "LICENSE"
}

shadowJar {
    from "LICENSE"

    configurations = [ project.configurations.shadow, project.configurations.modshadow ]
    classifier = "dev-all"
    exclude "kotlin/**", "kotlinx/**", "javax/**", "META-INF"
    exclude "org/checkerframework/**", "org/intellij/**", "org/jetbrains/annotations/**"
    exclude "com/google/gson/**"
    exclude "net/kyori/**"
    exclude "org/slf4j/**"

    def relocPath = "us.potatoboy.ledger.libs."
    relocate "com.fasterxml", relocPath + "com.fasterxml"
    relocate "com.moandjiezana.toml", relocPath + "com.moandjiezana.toml"
    relocate "com.uchuhimo.konf", relocPath + "com.uchuhimo.konf"
    relocate "javassist", relocPath + "javassist"
    // Relocate each apache lib separately as just org.apache.commons will relocate things that aren't shadowd and break stuff
    relocate "org.apache.commons.lang3", relocPath + "org.apache.commons.lang3"
    relocate "org.apache.commons.text", relocPath + "org.apache.commons.text"
    relocate "org.reflections", relocPath + "org.reflections"
    // it appears you cannot relocate sqlite due to the native libraries
//    relocate "org.sqlite", relocPath + "org.sqlite"
}

remapJar {
    dependsOn(shadowJar)
    input.set(shadowJar.archivePath)
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        maven {
            name = "FstMaven"
            credentials(PasswordCredentials)
            url = uri(System.getenv("FstMavenUrl") == null ? "" : System.getenv("FstMavenUrl"))
            allowInsecureProtocol = true
        }
        // mavenLocal()
    }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "16"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "16"
    }
}

detekt {
    buildUponDefaultConfig = true
    autoCorrect = true
    config = rootProject.files("detekt.yml")
}

gitHooks {
    hooks = ["pre-commit" : "detekt"]
}
